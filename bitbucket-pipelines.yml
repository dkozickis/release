image: golang

definitions:
  steps:
    - step: &unit
        name: unit tests
        script:
          - PACKAGE_PATH="${GOPATH}/src/bitbucket.org/${BITBUCKET_REPO_OWNER}/${BITBUCKET_REPO_SLUG}"
          - mkdir -pv "${PACKAGE_PATH}"
          - tar -cO --exclude-vcs --exclude=bitbucket-pipelines.yml . | tar -xv -C "${PACKAGE_PATH}"
          - cd "${PACKAGE_PATH}"
          - go get -u github.com/golang/dep/cmd/dep
          - dep ensure
          - go test ./...
    - step: &lint
        name: linting
        script:
          - go get -u golang.org/x/lint/golint
          - golint -set_exit_status ./...
    - step: &integration
        name: linting
        script:
          - PACKAGE_PATH="${GOPATH}/src/bitbucket.org/${BITBUCKET_REPO_OWNER}/${BITBUCKET_REPO_SLUG}"
          - mkdir -pv "${PACKAGE_PATH}"
          - tar -cO --exclude-vcs --exclude=bitbucket-pipelines.yml . | tar -xv -C "${PACKAGE_PATH}"
          - cd "${PACKAGE_PATH}"
          - go get -u github.com/golang/dep/cmd/dep
          - dep ensure
          - go install
          # expecting release to exist and hash to be the same so is fine to pass
          - release validate -username $USER -password $ACCESS_TOKEN -repo cloudreach/release -tag initial -hash $BITBUCKET_COMMIT
          - test $(echo $?) -eq 0
          # expecting release to exist but hash to be different, expecting fail
          - release validate -username $USER -password $ACCESS_TOKEN -repo cloudreach/release -tag initial -hash blah
          - test $(echo $?) -eq 1
          # expecting fail as unauthorized
          - release validate -username blah -password blah -repo cloudreach/release -tag initial -hash blah
          - test $(echo $?) -eq 1
          # expecting fail due to misuse
          - release validate -username blah -password blah -repo cloudreach/release -tag initiale
          - test $(echo $?) -eq 2
          - release validate
          - test $(echo $?) -eq 2
          # expecting fail as unauthorized
          - release create -username blah -password blah -repo cloudreach/release -tag initial -hash blah
          - test $(echo $?) -eq 1
          # expecting fail due to misuse
          - release create -username blah -password blah -repo cloudreach/release -tag initiale
          - test $(echo $?) -eq 2
          - release create
          - test $(echo $?) -eq 2

pipelines:
  default:
    - parallel:
       - step: *unit
       - step: *lint
       - step: *integration
  master:
    - parallel:
        - step: *unit
        - step: *lint
        - step: *integration
    - step:
        name: create release
        script:
          - apt-get update && apt-get install -y && apt-get install jq -y
          - VERSION=$(cat version.json | jq '.version'| tr -d \")
          # Create version
          - release create -username $USER -password $ACCESS_TOKEN -repo cloudreach/release -tag $VERSION -hash $BITBUCKET_COMMIT
